//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 10.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !NO_EXPORT_APP_MAIN
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("do_low_error", "false");
    action();
  }
#endif

  public void HDevelopStop()
  {
  }

  // Procedures 
  // External procedures 
  // Chapter: Graphics / Text
  // Short Description: This procedure displays 'Click 'Run' to continue' in the lower right corner of the screen.
  public void disp_continue_message (HTuple hv_WindowHandle, HTuple hv_Color, HTuple hv_Box)
  {


    // Local control variables 

    HTuple hv_ContinueMessage, hv_Row, hv_Column;
    HTuple hv_Width, hv_Height, hv_Ascent, hv_Descent, hv_TextWidth;
    HTuple hv_TextHeight;

    // Initialize local and output iconic variables 

    //This procedure displays 'Press Run (F5) to continue' in the
    //lower right corner of the screen.
    //It uses the procedure disp_message.
    //
    //Input parameters:
    //WindowHandle: The window, where the text shall be displayed
    //Color: defines the text color.
    //   If set to '' or 'auto', the currently set color is used.
    //Box: If set to 'true', the text is displayed in a box.
    //
    hv_ContinueMessage = "Press Run (F5) to continue";
    HOperatorSet.GetWindowExtents(hv_WindowHandle, out hv_Row, out hv_Column, out hv_Width, 
        out hv_Height);
    HOperatorSet.GetStringExtents(hv_WindowHandle, (" "+hv_ContinueMessage)+" ", 
        out hv_Ascent, out hv_Descent, out hv_TextWidth, out hv_TextHeight);
    disp_message(hv_WindowHandle, hv_ContinueMessage, "window", (hv_Height-hv_TextHeight)-12, 
        (hv_Width-hv_TextWidth)-12, hv_Color, hv_Box);

    return;
  }

  // Chapter: Graphics / Text
  // Short Description: This procedure writes a text message.
  public void disp_message (HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem, 
      HTuple hv_Row, HTuple hv_Column, HTuple hv_Color, HTuple hv_Box)
  {


    // Local control variables 

    HTuple hv_Red, hv_Green, hv_Blue, hv_Row1Part;
    HTuple hv_Column1Part, hv_Row2Part, hv_Column2Part, hv_RowWin;
    HTuple hv_ColumnWin, hv_WidthWin, hv_HeightWin, hv_MaxAscent;
    HTuple hv_MaxDescent, hv_MaxWidth, hv_MaxHeight, hv_R1=new HTuple();
    HTuple hv_C1=new HTuple(), hv_FactorRow=new HTuple(), hv_FactorColumn=new HTuple();
    HTuple hv_Width=new HTuple(), hv_Index=new HTuple(), hv_Ascent=new HTuple();
    HTuple hv_Descent=new HTuple(), hv_W=new HTuple(), hv_H=new HTuple();
    HTuple hv_FrameHeight=new HTuple(), hv_FrameWidth=new HTuple();
    HTuple hv_R2=new HTuple(), hv_C2=new HTuple(), hv_DrawMode=new HTuple();
    HTuple hv_Exception=new HTuple(), hv_CurrentColor=new HTuple();

    HTuple   hv_Color_COPY_INP_TMP = hv_Color.Clone();
    HTuple   hv_Column_COPY_INP_TMP = hv_Column.Clone();
    HTuple   hv_Row_COPY_INP_TMP = hv_Row.Clone();
    HTuple   hv_String_COPY_INP_TMP = hv_String.Clone();

    // Initialize local and output iconic variables 

    //This procedure displays text in a graphics window.
    //
    //Input parameters:
    //WindowHandle: The WindowHandle of the graphics window, where
    //   the message should be displayed
    //String: A tuple of strings containing the text message to be displayed
    //CoordSystem: If set to 'window', the text position is given
    //   with respect to the window coordinate system.
    //   If set to 'image', image coordinates are used.
    //   (This may be useful in zoomed images.)
    //Row: The row coordinate of the desired text position
    //   If set to -1, a default value of 12 is used.
    //Column: The column coordinate of the desired text position
    //   If set to -1, a default value of 12 is used.
    //Color: defines the color of the text as string.
    //   If set to [], '' or 'auto' the currently set color is used.
    //   If a tuple of strings is passed, the colors are used cyclically
    //   for each new textline.
    //Box: If set to 'true', the text is written within a white box.
    //
    //prepare window
    HOperatorSet.GetRgb(hv_WindowHandle, out hv_Red, out hv_Green, out hv_Blue);
    HOperatorSet.GetPart(hv_WindowHandle, out hv_Row1Part, out hv_Column1Part, out hv_Row2Part, 
        out hv_Column2Part);
    HOperatorSet.GetWindowExtents(hv_WindowHandle, out hv_RowWin, out hv_ColumnWin, 
        out hv_WidthWin, out hv_HeightWin);
    HOperatorSet.SetPart(hv_WindowHandle, 0, 0, hv_HeightWin-1, hv_WidthWin-1);
    //
    //default settings
    if ((int)(new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(-1))) != 0)
    {
      hv_Row_COPY_INP_TMP = 12;
    }
    if ((int)(new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(-1))) != 0)
    {
      hv_Column_COPY_INP_TMP = 12;
    }
    if ((int)(new HTuple(hv_Color_COPY_INP_TMP.TupleEqual(new HTuple()))) != 0)
    {
      hv_Color_COPY_INP_TMP = "";
    }
    //
    hv_String_COPY_INP_TMP = (((""+hv_String_COPY_INP_TMP)+"")).TupleSplit("\n");
    //
    //Estimate extentions of text depending on font size.
    HOperatorSet.GetFontExtents(hv_WindowHandle, out hv_MaxAscent, out hv_MaxDescent, 
        out hv_MaxWidth, out hv_MaxHeight);
    if ((int)(new HTuple(hv_CoordSystem.TupleEqual("window"))) != 0)
    {
      hv_R1 = hv_Row_COPY_INP_TMP.Clone();
      hv_C1 = hv_Column_COPY_INP_TMP.Clone();
    }
    else
    {
      //transform image to window coordinates
      hv_FactorRow = (1.0*hv_HeightWin)/((hv_Row2Part-hv_Row1Part)+1);
      hv_FactorColumn = (1.0*hv_WidthWin)/((hv_Column2Part-hv_Column1Part)+1);
      hv_R1 = ((hv_Row_COPY_INP_TMP-hv_Row1Part)+0.5)*hv_FactorRow;
      hv_C1 = ((hv_Column_COPY_INP_TMP-hv_Column1Part)+0.5)*hv_FactorColumn;
    }
    //
    //display text box depending on text size
    if ((int)(new HTuple(hv_Box.TupleEqual("true"))) != 0)
    {
      //calculate box extents
      hv_String_COPY_INP_TMP = (" "+hv_String_COPY_INP_TMP)+" ";
      hv_Width = new HTuple();
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_String_COPY_INP_TMP.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        HOperatorSet.GetStringExtents(hv_WindowHandle, hv_String_COPY_INP_TMP.TupleSelect(
            hv_Index), out hv_Ascent, out hv_Descent, out hv_W, out hv_H);
        hv_Width = hv_Width.TupleConcat(hv_W);
      }
      hv_FrameHeight = hv_MaxHeight*(new HTuple(hv_String_COPY_INP_TMP.TupleLength()
          ));
      hv_FrameWidth = (((new HTuple(0)).TupleConcat(hv_Width))).TupleMax();
      hv_R2 = hv_R1+hv_FrameHeight;
      hv_C2 = hv_C1+hv_FrameWidth;
      //display rectangles
      HOperatorSet.GetDraw(hv_WindowHandle, out hv_DrawMode);
      HOperatorSet.SetDraw(hv_WindowHandle, "fill");
      HOperatorSet.SetColor(hv_WindowHandle, "light gray");
      HOperatorSet.DispRectangle1(hv_WindowHandle, hv_R1+3, hv_C1+3, hv_R2+3, hv_C2+3);
      HOperatorSet.SetColor(hv_WindowHandle, "white");
      HOperatorSet.DispRectangle1(hv_WindowHandle, hv_R1, hv_C1, hv_R2, hv_C2);
      HOperatorSet.SetDraw(hv_WindowHandle, hv_DrawMode);
    }
    else if ((int)(new HTuple(hv_Box.TupleNotEqual("false"))) != 0)
    {
      hv_Exception = "Wrong value of control parameter Box";
      throw new HalconException(hv_Exception);
    }
    //Write text.
    for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_String_COPY_INP_TMP.TupleLength()
        ))-1); hv_Index = (int)hv_Index + 1)
    {
      hv_CurrentColor = hv_Color_COPY_INP_TMP.TupleSelect(hv_Index%(new HTuple(hv_Color_COPY_INP_TMP.TupleLength()
          )));
      if ((int)((new HTuple(hv_CurrentColor.TupleNotEqual(""))).TupleAnd(new HTuple(hv_CurrentColor.TupleNotEqual(
          "auto")))) != 0)
      {
        HOperatorSet.SetColor(hv_WindowHandle, hv_CurrentColor);
      }
      else
      {
        HOperatorSet.SetRgb(hv_WindowHandle, hv_Red, hv_Green, hv_Blue);
      }
      hv_Row_COPY_INP_TMP = hv_R1+(hv_MaxHeight*hv_Index);
      HOperatorSet.SetTposition(hv_WindowHandle, hv_Row_COPY_INP_TMP, hv_C1);
      HOperatorSet.WriteString(hv_WindowHandle, hv_String_COPY_INP_TMP.TupleSelect(
          hv_Index));
    }
    //reset changed window settings
    HOperatorSet.SetRgb(hv_WindowHandle, hv_Red, hv_Green, hv_Blue);
    HOperatorSet.SetPart(hv_WindowHandle, hv_Row1Part, hv_Column1Part, hv_Row2Part, 
        hv_Column2Part);

    return;
  }

  // Chapter: Graphics / Text
  // Short Description: Set font independent of OS
  public void set_display_font (HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font, 
      HTuple hv_Bold, HTuple hv_Slant)
  {


        // Local control variables 

        HTuple hv_OS, hv_Exception=new HTuple();
        HTuple hv_AllowedFontSizes=new HTuple(), hv_Distances=new HTuple();
        HTuple hv_Indices=new HTuple();

        HTuple   hv_Bold_COPY_INP_TMP = hv_Bold.Clone();
        HTuple   hv_Font_COPY_INP_TMP = hv_Font.Clone();
        HTuple   hv_Size_COPY_INP_TMP = hv_Size.Clone();
        HTuple   hv_Slant_COPY_INP_TMP = hv_Slant.Clone();

        // Initialize local and output iconic variables 

    //This procedure sets the text font of the current window with
    //the specified attributes.
    //It is assumed that following fonts are installed on the system:
    //Windows: Courier New, Arial Times New Roman
    //Linux: courier, helvetica, times
    //Because fonts are displayed smaller on Linux than on Windows,
    //a scaling factor of 1.25 is used the get comparable results.
    //For Linux, only a limited number of font sizes is supported,
    //to get comparable results, it is recommended to use one of the
    //following sizes: 9, 11, 14, 16, 20, 27
    //(which will be mapped internally on Linux systems to 11, 14, 17, 20, 25, 34)
    //
    //input parameters:
    //WindowHandle: The graphics window for which the font will be set
    //Size: The font size. If Size=-1, the default of 16 is used.
    //Bold: If set to 'true', a bold font is used
    //Slant: If set to 'true', a slanted font is used
    //
    HOperatorSet.GetSystem("operating_system", out hv_OS);
    if ((int)((new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
        new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(-1)))) != 0)
    {
      hv_Size_COPY_INP_TMP = 16;
    }
    if ((int)(new HTuple((((hv_OS.TupleStrFirstN(2)).TupleStrLastN(0))).TupleEqual(
        "Win"))) != 0)
    {
      //set font on Windows systems
      if ((int)((new HTuple((new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))).TupleOr(
          new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("Courier"))))).TupleOr(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual(
          "courier")))) != 0)
      {
        hv_Font_COPY_INP_TMP = "Courier New";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
      {
        hv_Font_COPY_INP_TMP = "Arial";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
      {
        hv_Font_COPY_INP_TMP = "Times New Roman";
      }
      if ((int)(new HTuple(hv_Bold_COPY_INP_TMP.TupleEqual("true"))) != 0)
      {
        hv_Bold_COPY_INP_TMP = 1;
      }
      else if ((int)(new HTuple(hv_Bold_COPY_INP_TMP.TupleEqual("false"))) != 0)
      {
        hv_Bold_COPY_INP_TMP = 0;
      }
      else
      {
        hv_Exception = "Wrong value of control parameter Bold";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Slant_COPY_INP_TMP.TupleEqual("true"))) != 0)
      {
        hv_Slant_COPY_INP_TMP = 1;
      }
      else if ((int)(new HTuple(hv_Slant_COPY_INP_TMP.TupleEqual("false"))) != 0)
      {
        hv_Slant_COPY_INP_TMP = 0;
      }
      else
      {
        hv_Exception = "Wrong value of control parameter Slant";
        throw new HalconException(hv_Exception);
      }
      try
      {
        HOperatorSet.SetFont(hv_WindowHandle, ((((((("-"+hv_Font_COPY_INP_TMP)+"-")+hv_Size_COPY_INP_TMP)+"-*-")+hv_Slant_COPY_INP_TMP)+"-*-*-")+hv_Bold_COPY_INP_TMP)+"-");
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        throw new HalconException(hv_Exception);
      }
    }
    else
    {
      //set font for UNIX systems
      hv_Size_COPY_INP_TMP = hv_Size_COPY_INP_TMP*1.25;
      hv_AllowedFontSizes = new HTuple();
      hv_AllowedFontSizes[0] = 11;
      hv_AllowedFontSizes[1] = 14;
      hv_AllowedFontSizes[2] = 17;
      hv_AllowedFontSizes[3] = 20;
      hv_AllowedFontSizes[4] = 25;
      hv_AllowedFontSizes[5] = 34;
      if ((int)(new HTuple(((hv_AllowedFontSizes.TupleFind(hv_Size_COPY_INP_TMP))).TupleEqual(
          -1))) != 0)
      {
        hv_Distances = ((hv_AllowedFontSizes-hv_Size_COPY_INP_TMP)).TupleAbs();
        HOperatorSet.TupleSortIndex(hv_Distances, out hv_Indices);
        hv_Size_COPY_INP_TMP = hv_AllowedFontSizes.TupleSelect(hv_Indices.TupleSelect(
            0));
      }
      if ((int)((new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))).TupleOr(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual(
          "Courier")))) != 0)
      {
        hv_Font_COPY_INP_TMP = "courier";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
      {
        hv_Font_COPY_INP_TMP = "helvetica";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
      {
        hv_Font_COPY_INP_TMP = "times";
      }
      if ((int)(new HTuple(hv_Bold_COPY_INP_TMP.TupleEqual("true"))) != 0)
      {
        hv_Bold_COPY_INP_TMP = "bold";
      }
      else if ((int)(new HTuple(hv_Bold_COPY_INP_TMP.TupleEqual("false"))) != 0)
      {
        hv_Bold_COPY_INP_TMP = "medium";
      }
      else
      {
        hv_Exception = "Wrong value of control parameter Bold";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Slant_COPY_INP_TMP.TupleEqual("true"))) != 0)
      {
        if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("times"))) != 0)
        {
          hv_Slant_COPY_INP_TMP = "i";
        }
        else
        {
          hv_Slant_COPY_INP_TMP = "o";
        }
      }
      else if ((int)(new HTuple(hv_Slant_COPY_INP_TMP.TupleEqual("false"))) != 0)
      {
        hv_Slant_COPY_INP_TMP = "r";
      }
      else
      {
        hv_Exception = "Wrong value of control parameter Slant";
        throw new HalconException(hv_Exception);
      }
      try
      {
        HOperatorSet.SetFont(hv_WindowHandle, ((((((("-adobe-"+hv_Font_COPY_INP_TMP)+"-")+hv_Bold_COPY_INP_TMP)+"-")+hv_Slant_COPY_INP_TMP)+"-normal-*-")+hv_Size_COPY_INP_TMP)+"-*-*-*-*-*-*-*");
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        throw new HalconException(hv_Exception);
      }
    }

    return;
  }

  // Main procedure 
  private void action()
  {

    // Local iconic variables 

    HObject ho_Image, ho_DarkRegion=null, ho_CharRegion=null;
    HObject ho_CharConnected=null, ho_CharOrig=null, ho_CharSel=null;
    HObject ho_Characters=null, ho_CharRectangle=null, ho_CharROI=null;
    HObject ho_ImageReduced=null, ho_ImageScaled=null, ho_CharConvex=null;
    HObject ho_SingleChar=null;


    // Local control variables 

    HTuple hv_OCRFontName, hv_FontName, hv_FontImages;
    HTuple hv_NumImages, hv_Width, hv_Height, hv_WindowID;
    HTuple hv_OCRHandle, hv_WidthCharacter, hv_HeightCharacter;
    HTuple hv_Interpolation, hv_Features, hv_Char, hv_NumHidden;
    HTuple hv_Preprocessing, hv_NumComponents, hv_NumChar;
    HTuple hv_NumSamples, hv_i, hv_Min=new HTuple(), hv_Max=new HTuple();
    HTuple hv_Range=new HTuple(), hv_WindowChar=new HTuple();
    HTuple hv_DoLoop=new HTuple(), hv_Row=new HTuple(), hv_Column=new HTuple();
    HTuple hv_Button=new HTuple(), hv_Index=new HTuple(), hv_RecChar=new HTuple();
    HTuple hv_Confidence=new HTuple();

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_DarkRegion);
    HOperatorSet.GenEmptyObj(out ho_CharRegion);
    HOperatorSet.GenEmptyObj(out ho_CharConnected);
    HOperatorSet.GenEmptyObj(out ho_CharOrig);
    HOperatorSet.GenEmptyObj(out ho_CharSel);
    HOperatorSet.GenEmptyObj(out ho_Characters);
    HOperatorSet.GenEmptyObj(out ho_CharRectangle);
    HOperatorSet.GenEmptyObj(out ho_CharROI);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_ImageScaled);
    HOperatorSet.GenEmptyObj(out ho_CharConvex);
    HOperatorSet.GenEmptyObj(out ho_SingleChar);

    try
    {
      //
      //OCR
      //
      // dev_update_window(...); only in hdevelop
      //Specify the name of the font to use for reading the date on the bottle.
      //It is easiest to use the pre-trained font Document.  If you have run the
      //program fontt.hdev in this directory, you can activate the second line
      //to use the font trained with this program.
      hv_OCRFontName = "Document";
      //OCRFontName := 'arial'
      hv_FontName = "arial";
      hv_FontImages = new HTuple();
      hv_FontImages[0] = "a1";
      hv_FontImages[1] = "a2";
      hv_FontImages[2] = "a3";
      hv_FontImages[3] = "a4";
      hv_FontImages[4] = "a5";
      hv_FontImages[5] = "a6";
      hv_FontImages[6] = "a7";
      hv_FontImages[7] = "a8";
      hv_FontImages[8] = "a9";
      hv_NumImages = new HTuple(hv_FontImages.TupleLength());
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, (("fonts/"+hv_FontName)+"_")+(hv_FontImages.TupleSelect(
          0)));
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.CloseWindow(HDevWindowStack.Pop());
      }
      HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
      HOperatorSet.SetWindowAttr("background_color","black");
      HOperatorSet.OpenWindow(0,0,hv_Width/2,hv_Height/2,0,"","",out hv_WindowID);
      HDevWindowStack.Push(hv_WindowID);
      set_display_font(hv_WindowID, 14, "mono", "true", "false");
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
      }
      disp_continue_message(hv_WindowID, "black", "true");
      //stop ()
      //---------- read OCR classifier ----------
      HOperatorSet.ReadOcrClassMlp(hv_OCRFontName, out hv_OCRHandle);
      HOperatorSet.GetParamsOcrClassMlp(hv_OCRHandle, out hv_WidthCharacter, out hv_HeightCharacter, 
          out hv_Interpolation, out hv_Features, out hv_Char, out hv_NumHidden, out hv_Preprocessing, 
          out hv_NumComponents);
      hv_NumChar = new HTuple(hv_Char.TupleLength());
      disp_continue_message(hv_WindowID, "black", "true");
      HDevelopStop();
      //---------- segmentation of characters ----------
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetShape(HDevWindowStack.GetActive(), "rectangle1");
      }
      hv_NumSamples = 0;
      for (hv_i=1; hv_i.Continue(hv_NumImages, 1); hv_i = hv_i.TupleAdd(1))
      {
        if (HDevWindowStack.IsOpen())
        {
          HOperatorSet.SetColored(HDevWindowStack.GetActive(), 12);
        }
        ho_Image.Dispose();
        HOperatorSet.ReadImage(out ho_Image, (("fonts/"+hv_FontName)+"_")+(hv_FontImages.TupleSelect(
            hv_i-1)));
        ho_DarkRegion.Dispose();
        HOperatorSet.BinThreshold(ho_Image, out ho_DarkRegion);
        ho_CharRegion.Dispose();
        HOperatorSet.ClosingCircle(ho_DarkRegion, out ho_CharRegion, 8.5);
        ho_CharConnected.Dispose();
        HOperatorSet.Connection(ho_CharRegion, out ho_CharConnected);
        ho_CharOrig.Dispose();
        HOperatorSet.Intersection(ho_CharConnected, ho_DarkRegion, out ho_CharOrig
            );
        ho_CharSel.Dispose();
        HOperatorSet.SelectShape(ho_CharOrig, out ho_CharSel, "area", "and", 50, 
            99999);
        ho_Characters.Dispose();
        HOperatorSet.SortRegion(ho_CharSel, out ho_Characters, "character", "true", 
            "row");
        //adapt to different brigthness
        ho_CharRectangle.Dispose();
        HOperatorSet.ShapeTrans(ho_CharRegion, out ho_CharRectangle, "rectangle1");
        ho_CharROI.Dispose();
        HOperatorSet.DilationRectangle1(ho_CharRectangle, out ho_CharROI, 10, 10);
        ho_ImageReduced.Dispose();
        HOperatorSet.ReduceDomain(ho_Image, ho_CharROI, out ho_ImageReduced);
        HOperatorSet.MinMaxGray(ho_CharROI, ho_Image, 5, out hv_Min, out hv_Max, 
            out hv_Range);
        ho_ImageScaled.Dispose();
        HOperatorSet.ScaleImage(ho_ImageReduced, out ho_ImageScaled, 255/hv_Range, 
            ((-hv_Min)*255)/hv_Range);
        if (HDevWindowStack.IsOpen())
        {
          HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
        }
        if (HDevWindowStack.IsOpen())
        {
          HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
        }
        if (HDevWindowStack.IsOpen())
        {
          HOperatorSet.DispObj(ho_Characters, HDevWindowStack.GetActive());
        }
        disp_continue_message(hv_WindowID, "black", "true");
        HDevelopStop();
        //interactive OCR
        HOperatorSet.SetWindowAttr("background_color","black");
        HOperatorSet.OpenWindow(0,(hv_Width/2)+50,128,128,0,"","",out hv_WindowChar);
        HDevWindowStack.Push(hv_WindowChar);
        set_display_font(hv_WindowChar, 27, "mono", "true", "false");
        HDevWindowStack.SetActive(hv_WindowID);
        ho_CharConvex.Dispose();
        HOperatorSet.ShapeTrans(ho_Characters, out ho_CharConvex, "rectangle1");
        if (HDevWindowStack.IsOpen())
        {
          HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
        }
        hv_DoLoop = 1;
        while ((int)(new HTuple(hv_DoLoop.TupleEqual(1))) != 0)
        {
          if (HDevWindowStack.IsOpen())
          {
            HOperatorSet.SetColor(HDevWindowStack.GetActive(), "red");
          }
          disp_message(hv_WindowID, "Left-click on a character to read; right mouse button to proceed to next image", 
              "image", 8, 10, "blue", "false");
          HOperatorSet.GetMbutton(hv_WindowID, out hv_Row, out hv_Column, out hv_Button);
          if (HDevWindowStack.IsOpen())
          {
            HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
          }
          HOperatorSet.GetRegionIndex(ho_CharConvex, hv_Row, hv_Column, out hv_Index);
          if ((int)(new HTuple(hv_Index.TupleGreater(0))) != 0)
          {
            ho_SingleChar.Dispose();
            HOperatorSet.SelectObj(ho_Characters, out ho_SingleChar, hv_Index);
            HOperatorSet.DoOcrSingleClassMlp(ho_SingleChar, ho_ImageScaled, hv_OCRHandle, 
                1, out hv_RecChar, out hv_Confidence);
            HDevWindowStack.SetActive(hv_WindowChar);
            if (HDevWindowStack.IsOpen())
            {
              HOperatorSet.SetPart(HDevWindowStack.GetActive(), 0, 0, 127, 127);
            }
            if (HDevWindowStack.IsOpen())
            {
              HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
            }
            disp_message(hv_WindowChar, hv_RecChar.TupleSelect(0), "image", 40, 53, 
                "green", "false");
            HDevWindowStack.SetActive(hv_WindowID);
            if (HDevWindowStack.IsOpen())
            {
              HOperatorSet.SetPart(HDevWindowStack.GetActive(), 0, 0, hv_Height-1, 
                  hv_Width-1);
            }
          }
          if ((int)(new HTuple(hv_Button.TupleEqual(4))) != 0)
          {
            hv_DoLoop = 0;
            HDevWindowStack.SetActive(hv_WindowChar);
            if (HDevWindowStack.IsOpen())
            {
              HOperatorSet.CloseWindow(HDevWindowStack.Pop());
            }
            HDevWindowStack.SetActive(hv_WindowID);
          }
        }
      }
      HOperatorSet.ClearOcrClassMlp(hv_OCRHandle);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetShape(HDevWindowStack.GetActive(), "original");
      }
      // dev_update_window(...); only in hdevelop
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_DarkRegion.Dispose();
      ho_CharRegion.Dispose();
      ho_CharConnected.Dispose();
      ho_CharOrig.Dispose();
      ho_CharSel.Dispose();
      ho_Characters.Dispose();
      ho_CharRectangle.Dispose();
      ho_CharROI.Dispose();
      ho_ImageReduced.Dispose();
      ho_ImageScaled.Dispose();
      ho_CharConvex.Dispose();
      ho_SingleChar.Dispose();

      throw HDevExpDefaultException;
    }
    ho_Image.Dispose();
    ho_DarkRegion.Dispose();
    ho_CharRegion.Dispose();
    ho_CharConnected.Dispose();
    ho_CharOrig.Dispose();
    ho_CharSel.Dispose();
    ho_Characters.Dispose();
    ho_CharRectangle.Dispose();
    ho_CharROI.Dispose();
    ho_ImageReduced.Dispose();
    ho_ImageScaled.Dispose();
    ho_CharConvex.Dispose();
    ho_SingleChar.Dispose();

  }


}
#if !NO_EXPORT_APP_MAIN
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

