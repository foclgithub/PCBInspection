//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 10.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !NO_EXPORT_APP_MAIN
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("do_low_error", "false");
    action();
  }
#endif

  public void HDevelopStop()
  {
  }

  // Main procedure 
  private void action()
  {

    // Local iconic variables 

    HObject ho_Image, ho_Bright, ho_RectPCB, ho_ImagePCB;
    HObject ho_Regions, ho_RectRegions, ho_ConnectedRegions;
    HObject ho_SelectedRegions, ho_region=null, ho_fileRegions;


    // Local control variables 

    HTuple hv_ImagePath, hv_width, hv_height, hv_WindowHandle;
    HTuple hv_RegionCount, hv_i, hv_FileRegionCount;

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_Bright);
    HOperatorSet.GenEmptyObj(out ho_RectPCB);
    HOperatorSet.GenEmptyObj(out ho_ImagePCB);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_RectRegions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_region);
    HOperatorSet.GenEmptyObj(out ho_fileRegions);

    //Code generated by Image Acquisition 01
    //open_framegrabber ('DirectShow', 1, 1, 0, 0, 0, 0, 'default', 8, 'gray', -1, 'false', 'default', 'CGimagetech USB Camera', 0, -1, AcqHandle)
    //grab_image_start (AcqHandle, -1)
    //grab_image_async (Image, AcqHandle, -1)
    //close_framegrabber (AcqHandle)


    //获得模板图像
    hv_ImagePath = "H:/PCBDetect/晟朗/电路板检测/Image/正常 - 副本.bmp";
    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, hv_ImagePath);

    //显示模板图像
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.CloseWindow(HDevWindowStack.Pop());
    }
    HOperatorSet.GetImageSize(ho_Image, out hv_width, out hv_height);
    HOperatorSet.SetWindowAttr("background_color","black");
    HOperatorSet.OpenWindow(0,0,hv_width,hv_height,0,"","",out hv_WindowHandle);
    HDevWindowStack.Push(hv_WindowHandle);
    HDevWindowStack.SetActive(hv_WindowHandle);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
    }
    HDevelopStop();

    //PCB ROI
    ho_Bright.Dispose();
    HOperatorSet.Threshold(ho_Image, out ho_Bright, 100, 255);
    ho_RectPCB.Dispose();
    HOperatorSet.ShapeTrans(ho_Bright, out ho_RectPCB, "rectangle2");
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetLineWidth(HDevWindowStack.GetActive(), 3);
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_RectPCB, HDevWindowStack.GetActive());
    }
    HDevelopStop();

    //建立芯片模板图像
    ho_ImagePCB.Dispose();
    HOperatorSet.ReduceDomain(ho_Image, ho_RectPCB, out ho_ImagePCB);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "fill");
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_ImagePCB, HDevWindowStack.GetActive());
    }
    HDevelopStop();

    ho_Regions.Dispose();
    HOperatorSet.Threshold(ho_ImagePCB, out ho_Regions, 220, 255);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Regions, HDevWindowStack.GetActive());
    }
    HDevelopStop();

    ho_RectRegions.Dispose();
    HOperatorSet.OpeningRectangle1(ho_Regions, out ho_RectRegions, 10, 10);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_RectRegions, HDevWindowStack.GetActive());
    }
    HDevelopStop();

    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_RectRegions, out ho_ConnectedRegions);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_ConnectedRegions, HDevWindowStack.GetActive());
    }
    HDevelopStop();

    ho_SelectedRegions.Dispose();
    HOperatorSet.SelectShapeStd(ho_ConnectedRegions, out ho_SelectedRegions, "rectangle1", 
        90);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_SelectedRegions, HDevWindowStack.GetActive());
    }
    HDevelopStop();

    HOperatorSet.CountObj(ho_SelectedRegions, out hv_RegionCount);
    for (hv_i=1; hv_i.Continue(hv_RegionCount, 1); hv_i = hv_i.TupleAdd(1))
    {
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
      }
      ho_region.Dispose();
      HOperatorSet.SelectObj(ho_SelectedRegions, out ho_region, hv_i);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_region, HDevWindowStack.GetActive());
      }
      HDevelopStop();
    }

    //将芯片模板存入文件
    HOperatorSet.WriteRegion(ho_SelectedRegions, "H:/PCBDetect/电路板检测Halcon程序/1.reg");

    //使用模板文件
    ho_fileRegions.Dispose();
    HOperatorSet.ReadRegion(out ho_fileRegions, "H:/PCBDetect/电路板检测Halcon程序/1.reg");
    HOperatorSet.CountObj(ho_fileRegions, out hv_FileRegionCount);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
    }
    for (hv_i=1; hv_i.Continue(hv_FileRegionCount, 1); hv_i = hv_i.TupleAdd(1))
    {
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
      }
      ho_region.Dispose();
      HOperatorSet.SelectObj(ho_fileRegions, out ho_region, hv_i);

      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_region, HDevWindowStack.GetActive());
      }
      HDevelopStop();
    }







    ho_Image.Dispose();
    ho_Bright.Dispose();
    ho_RectPCB.Dispose();
    ho_ImagePCB.Dispose();
    ho_Regions.Dispose();
    ho_RectRegions.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();
    ho_region.Dispose();
    ho_fileRegions.Dispose();

  }


}
#if !NO_EXPORT_APP_MAIN
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

